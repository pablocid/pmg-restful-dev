{"version":3,"sources":["api/schm/schm.model.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;;;;;AACA,IAAI,SAAS,mBAAS,MAAtB;;AAEA,IAAI,gBAAgB,IAAI,MAAJ,CAAW;AAC9B,QAAK,OAAO,KAAP,CAAa,QADY;AAE9B,QAAM,OAAO,KAAP,CAAa;AAFW,CAAX,EAGlB,EAAE,KAAM,KAAR,EAHkB,CAApB;;AAKA,IAAI,iBAAiB,IAAI,MAAJ,CAAW;AAC9B,MAAI,OAAO,KAAP,CAAa,MADa;AAE9B,SAAO,OAAO,KAAP,CAAa;AAFU,CAAX,EAGlB,EAAC,KAAK,KAAN,EAHkB,CAArB;;AAKA,IAAI,eAAe,IAAI,MAAJ,CAAW;AAC5B,MAAI,OAAO,KAAP,CAAa,MADW;AAE5B,YAAU,OAAO,KAAP,CAAa,MAFK;AAG5B,QAAM,OAAO,KAAP,CAAa,MAHS;AAI5B,eAAY,OAAO,KAAP,CAAa,QAJG;AAK5B,YAAU,OAAO,KAAP,CAAa,OALK;AAM5B,YAAU,OAAO,KAAP,CAAa,OANK;AAO5B,gBAAc,OAAO,KAAP,CAAa,MAPC;AAQ5B,SAAO,OAAO,KAAP,CAAa,MARQ;AAS5B,YAAU,CAAC,cAAD,CATkB;AAU5B,SAAO,OAAO,KAAP,CAAa;AAVQ,CAAX,EAWhB,EAAC,KAAK,KAAN,EAXgB,CAAnB;;AAaA,IAAI,cAAc,IAAI,MAAJ,CAAW;AAC3B,MAAG,OAAO,KAAP,CAAa,MADW;AAE3B,QAAK,OAAO,KAAP,CAAa,MAFS;AAG3B,UAAO,OAAO,KAAP,CAAa,MAHO;AAI3B,YAAS,CAAC,OAAO,KAAP,CAAa,MAAd;AAJkB,CAAX,EAKf,EAAC,KAAK,KAAN,EALe,CAAlB;;AAOA,IAAI,aAAa,IAAI,MAAJ,CAAW;AAC1B,QAAM,OAAO,KAAP,CAAa,MADO;AAE1B,eAAa,OAAO,KAAP,CAAa,MAFA;AAG1B,SAAO,OAAO,KAAP,CAAa,MAHM;AAI1B,SAAM,CAAC,WAAD,CAJoB;AAK1B,WAAS,OAAO,KAAP,CAAa,IALI;AAM3B,WAAQ,CAAC,aAAD,CANmB;AAO1B,UAAQ,CAAC,YAAD,CAPkB;AAQ1B,UAAQ;AARkB,CAAX,CAAjB;;kBAWe,mBAAS,KAAT,CAAe,MAAf,EAAuB,UAAvB,C;;AAIf","file":"api/schm/schm.model.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose';\nvar Schema = mongoose.Schema;\n\nvar updatedSchema = new Schema({\n\tuser:Schema.Types.ObjectId,\n\tdate: Schema.Types.Date\n},{ _id : false });\n\nvar MsgErrorSchema = new Schema({\n  id: Schema.Types.Number,\n  value: Schema.Types.String\n}, {_id: false});\n\nvar InputsSchema = new Schema({\n  id: Schema.Types.String,\n  dataType: Schema.Types.String,\n  name: Schema.Types.String,\n  inputSchema:Schema.Types.ObjectId,\n  required: Schema.Types.Boolean,\n  reqValid: Schema.Types.Boolean,\n  validateType: Schema.Types.String,\n  regex: Schema.Types.String,\n  msgError :[MsgErrorSchema],\n  label: Schema.Types.String,\n}, {_id: false});\n\nvar QuerySchema = new Schema({\n  id:Schema.Types.String,\n  schm:Schema.Types.String,\n  filter:Schema.Types.String,\n  populate:[Schema.Types.String],\n}, {_id: false});\n\nvar SchmSchema = new Schema({\n  name: Schema.Types.String,\n  description: Schema.Types.String,\n  label: Schema.Types.String,\n  query:[QuerySchema],\n  created: Schema.Types.Date,\n\tupdated:[updatedSchema],\n  inputs: [InputsSchema],\n  active: Boolean\n});\n\nexport default mongoose.model('Schm', SchmSchema);\n\n\n\n/*\n    inputs:[\n        {\n            id:\"cantidad\",\n            dataType:\"\",\n            name:\"\",\n            inputSchema:\"KJHJHK7657657\",\n            required:true,\n            validate:true,\n            validateType:\"number\",\n            label:\"Ingresa la cantidad\",\n            msgError:[\n                {id:1, value:\"Error al ingresar la cantidad bla bla\"}\n            ],\n            regex:\"\\\\d*2\"\n        }\n    ]\n*/"],"sourceRoot":"/source/"}