{"version":3,"sources":["api/upload/upload.controller.js"],"names":["index","show","create","update","destroy","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","send","config","credentials","AWS","S3","req","listObjects","Bucket","data","opt","Key","params","id","getObject","Body","console","log","body","base64","name","buf","Buffer","file","replace","ContentEncoding","ContentType","putObject","ok","form","IncomingForm","on","field","headers","s3req","readFileSync","path","parse","_id","findById","exec","catch","conf","Delete","Objects","deleteObjects"],"mappings":"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","file":"upload.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/uploads              ->  index\n * POST    /api/uploads              ->  create\n * GET     /api/uploads/:id          ->  show\n * PUT     /api/uploads/:id          ->  update\n * DELETE  /api/uploads/:id          ->  destroy\n */\n\n//'use strict';\n\nimport _ from 'lodash';\nimport Upload from './upload.model';\nimport fs from 'fs';\n/* AWS S3 */\nimport AWS from 'aws-sdk';\nimport config from '../../config/environment';\nimport formidable from 'formidable';\nimport path from 'path';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\nAWS.config.credentials = config.AWS;\n//AWS S3 Object\nvar S3 = new AWS.S3();\n\n// Gets a list of Uploads\nexport function index(req, res) {\n  S3.listObjects({Bucket:'pmgv-files'},(err, data)=>{\n    if(err){\n        return respondWithResult(res)(err);  \n      }\n      return respondWithResult(res)(data);\n  });\n\n}\n\n// Gets a single Upload from the DB\nexport function show(req, res) {\n  var opt = {\n    Bucket:'pmgv-files',\n    Key:req.params.id\n  };\n\n  S3.getObject(opt,(err, data)=>{\n     if(data){\n        res.end(data.Body);\n     }else{\n       handleEntityNotFound(res);\n     }\n  });\n}\n\n// Creates a new Upload in the DB\nexport function create(req, res) {\n  console.log('saving image ...')\n  \n  //console.log(req.body.file)\n  if(req.body.base64 && req.body.name){\n\n    var buf = new Buffer(req.body.file.replace(/^data:image\\/\\w+;base64,/, \"\"),'base64')\n    var data = {\n      Key: req.body.name, \n      Bucket:'pmgv-files',\n      Body: buf,\n      ContentEncoding: 'base64',\n      ContentType: 'image/jpeg'\n    };\n    S3.putObject(data, function(err, data){\n        if (err) { \n          console.log(err);\n          console.log('Error uploading data: ', data); \n        } else {\n          console.log('succesfully uploaded the image!');\n        }\n        return respondWithResult(res)({ok:true});\n    });\n\n  }\n\n  //req.pipe(fs.createWriteStream(\"out_file.bin\", { flags: 'w', encoding: null, fd: null}))\n  //console.log(req)\n  \n  // create an incoming form object\n  var form = new formidable.IncomingForm();\n\n  // specify that we want to allow the user to upload multiple files in a single request\n  //form.multiples = true;\n\n  // store all uploads in the /uploads directory\n  //form.uploadDir = path.join(__dirname, '/uploads');\n\n  // every time a file has been uploaded successfully,\n  // rename it to it's orignal name\n  form.on('file', function(field, file) {\n    if(!file.name){\n      file.name = req.headers[\"file-name\"];\n    }\n    var s3req = {\n      Body: fs.readFileSync(file.path),\n      Bucket:'pmgv-files',\n      Key:file.name\n    };\n\n    S3.putObject(s3req,(err,data)=>{\n      if(err) return respondWithResult(res)(err);\n      return respondWithResult(res)(data);\n    })\n  });\n\n  // log any errors that occur\n  form.on('error', function(err) {\n    console.log('An error has occured: \\n' + err);\n  });\n\n  // once all the files have been uploaded, send a response to the client\n  form.on('end', function() {\n    //res.end('success');\n  });\n\n  // parse the incoming request containing the form data\n  form.parse(req);\n  /*function(err, fields, files) {\n      res.writeHead(200, {'content-type': 'text/plain'});\n    }\n    */\n\n}\n\n// Updates an existing Upload in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Upload.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Upload from the DB\nexport function destroy(req, res) {\n  var conf = {\n    Bucket:'pmgv-files',\n    Delete:{\n      Objects:[\n        {Key: req.params.id}\n      ]\n    }\n  };\n  S3.deleteObjects(conf, (err, data)=>{\n    if(err) return res.json(err);\n\n    return res.json({status:'OK'})\n  });\n\n}\n"]}