{"version":3,"sources":["api/upload/upload.controller.js"],"names":[],"mappings":"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","file":"api/upload/upload.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/uploads              ->  index\n * POST    /api/uploads              ->  create\n * GET     /api/uploads/:id          ->  show\n * PUT     /api/uploads/:id          ->  update\n * DELETE  /api/uploads/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Upload from './upload.model';\nimport fs from 'fs';\n/* AWS S3 */\nimport AWS from 'aws-sdk';\nimport config from '../../config/environment';\nimport formidable from 'formidable';\nimport path from 'path';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\nAWS.config.credentials = config.AWS;\n//AWS S3 Object\nvar S3 = new AWS.S3();\n\n// Gets a list of Uploads\nexport function index(req, res) {\n  S3.listObjects({Bucket:'pmgv-files'},(err, data)=>{\n    if(err){\n        return respondWithResult(res)(err);  \n      }\n      return respondWithResult(res)(data);\n  });\n\n}\n\n// Gets a single Upload from the DB\nexport function show(req, res) {\n  var opt = {\n    Bucket:'pmgv-files',\n    Key:req.params.id\n  };\n\n  S3.getObject(opt,(err, data)=>{\n    res.end(data.Body);\n  });\n}\n\n// Creates a new Upload in the DB\nexport function create(req, res) {\n\n  // create an incoming form object\n  var form = new formidable.IncomingForm();\n\n  // specify that we want to allow the user to upload multiple files in a single request\n  //form.multiples = true;\n\n  // store all uploads in the /uploads directory\n  //form.uploadDir = path.join(__dirname, '/uploads');\n\n  // every time a file has been uploaded successfully,\n  // rename it to it's orignal name\n  form.on('file', function(field, file) {\n    var s3req = {\n    Body: fs.readFileSync(file.path),\n    Bucket:'pmgv-files',\n    Key:file.name\n    };\n\n    S3.putObject(s3req,(err,data)=>{\n    //if(err) return respondWithResult(res)(err);\n\n    //return respondWithResult(res)({ok:true});\n    })\n  });\n\n  // log any errors that occur\n  form.on('error', function(err) {\n    console.log('An error has occured: \\n' + err);\n  });\n\n  // once all the files have been uploaded, send a response to the client\n  form.on('end', function() {\n    res.end('success');\n  });\n\n  // parse the incoming request containing the form data\n  form.parse(req);\n\n}\n\n// Updates an existing Upload in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Upload.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Upload from the DB\nexport function destroy(req, res) {\n  var conf = {\n    Bucket:'pmgv-files',\n    Delete:{\n      Objects:[\n        {Key: req.params.id}\n      ]\n    }\n  };\n  S3.deleteObjects(conf, (err, data)=>{\n    if(err) return res.json(err);\n\n    return res.json({status:'OK'})\n  });\n\n}\n"],"sourceRoot":"/source/"}