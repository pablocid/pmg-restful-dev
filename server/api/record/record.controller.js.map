{"version":3,"sources":["api/record/record.controller.js"],"names":["stream","index","aggregate","show","create","update","destroy","Schm","require","Stream","respondWithResult","res","statusCode","entity","status","json","ArrayFormatter","call","writable","_done","prototype","write","doc","_hasWritten","emit","end","req","query","checkParam","schm","filter","JSON","parse","i","length","p","attributes","key","datatype","value","push","find","cursor","pipe","saveUpdates","updates","updated","extend","save","then","removeEntity","remove","handleEntityNotFound","handleError","err","send","param","dataType","response","test","arr","isValid","console","log","items","parseInt","page","Error","populate","qAllArr","count","exec","sort","created","skip","limit","fullSchm","all","spread","data","schema","pages","Math","ceil","totalLength","PopulateByAttr","x","schemaPopulated","s","fail","attrId","itemsPopulated","map","id","reference","popQuery","q","$or","_id","AggregateParser","AggParser","aP","catch","params","fcall","findById","Array","isArray","record","done","a","body"],"mappings":"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","file":"record.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/records              ->  index\n * POST    /api/records              ->  create\n * GET     /api/records/:id          ->  show\n * PUT     /api/records/:id          ->  update\n * DELETE  /api/records/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Record from './record.model';\nvar Schm = require('../schm/schm.controller');\nimport mongoose from 'mongoose';\nimport q from 'q';\nvar Stream = require('stream').Stream;\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function(entity) {\n        if (entity) {\n            res.status(statusCode).json(entity);\n        }\n    };\n}\n\nfunction ArrayFormatter() {\n    Stream.call(this);\n    this.writable = true;\n    this._done = false;\n}\n\nArrayFormatter.prototype = Stream.prototype;\n\nArrayFormatter.prototype.write = function(doc) {\n    if (!this._hasWritten) {\n        this._hasWritten = true;\n\n        // open an object literal / array string along with the doc\n        this.emit('data', '[' + JSON.stringify(doc));\n\n    } else {\n        this.emit('data', ',' + JSON.stringify(doc));\n    }\n\n    return true;\n}\n\nArrayFormatter.prototype.end =\n    ArrayFormatter.prototype.destroy = function() {\n        if (this._done) return;\n        this._done = true;\n\n        // close the object literal / array\n        this.emit('data', ']');\n        // done\n        this.emit('end');\n    }\n\nexport function stream(req, res) {\n    var query = {};\n    //filtrar por schm\n    if (checkParam(req.query.schm, 'objectId')) {\n        query.schm = req.query.schm;\n        //console.log('schm')\n    }\n\n    if (checkParam(req.query.filter, 'filter')) {\n        query[\"$and\"] = [];\n\n        var filter = JSON.parse(req.query.filter);\n        for (var i = 0; i < filter.length; i++) {\n            var p = { attributes: {} };\n            p[\"attributes\"][\"$elemMatch\"] = {};\n            p[\"attributes\"][\"$elemMatch\"]['id'] = filter[i].key;\n            p[\"attributes\"][\"$elemMatch\"][filter[i].datatype] = filter[i].value;\n            query[\"$and\"].push(p);\n        }\n    }\n\n    Record.find(query).cursor().pipe(new ArrayFormatter()).pipe(res);\n\n}\n\nfunction saveUpdates(updates) {\n    return function(entity) {\n        var updated = _.extend(entity, updates);\n        return updated.save()\n            .then(updated => {\n                return updated;\n            });\n    };\n}\n\nfunction removeEntity(res) {\n    return function(entity) {\n        if (entity) {\n            return entity.remove()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function(entity) {\n        if (!entity) {\n            res.status(404).end();\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function(err) {\n        res.status(statusCode).send(err);\n    };\n}\n\nfunction checkParam(param, dataType) {\n\n    if (param === null) { return false; }\n    var response = false;\n\n    if (dataType === 'string') {\n        if (typeof param === 'string' && param.length > 0) {\n            response = true;\n        }\n    }\n\n    if (dataType === 'number') {\n        //console.log('chequea numero')\n        if (typeof param === 'number') {\n            response = true;\n        }\n        if (typeof param === 'string') {\n\n            if (/^\\d*$/.test(param)) {\n                //console.log('es  numero')\n                response = true;\n            }\n        }\n    }\n\n    if (dataType === 'objectId') {\n        if (/^[0-9a-f]{24}$/i.test(param)) {\n            response = true;\n        }\n    }\n\n    //filtro de registros\n    if (dataType === 'filter') {\n        //checkeando si hay errores en el parseo a JSON\n        try {\n            var arr = JSON.parse(param);\n            //check if is an Array and if is empty\n            if (arr.length) {\n                // verificando si los obj dentro del array tiene las propiedades key, datatype y value\n                var isValid = true;\n                for (var index = 0; index < arr.length; index++) {\n                    if (arr[index].key === null || arr[index].value === null || arr[index].datatype === null) {\n                        isValid = false;\n                    }\n                }\n                response = isValid;\n            }\n\n        } catch (err) {\n            response = false;\n            console.log('invalid JSON')\n        }\n    }\n\n    return response;\n}\n\n// Gets a list of Records\nexport function index(req, res) {\n\n    var items = 30;\n    if (checkParam(req.query.items, 'number')) {\n        items = parseInt(req.query.items);\n    }\n    var page = req.query.page || 1;\n    // checking the query data types\n    if (!checkParam(page, 'number') || page === \"0\") {\n        return respondWithResult(res, 500)({ Error: 'El parámetro page no es válido' });\n    }\n    if (!checkParam(items, 'number')) {\n        return respondWithResult(res, 500)({ Error: 'El parámetro items no es válido' });\n    }\n\n    var query = {};\n    //filtrar por schm\n    if (checkParam(req.query.schm, 'objectId')) {\n        query.schm = req.query.schm;\n        //console.log('schm')\n    }\n    // populate by attr objectId\n    if (checkParam(req.query.populate, 'objectId')) {\n        //query.populate = req.query.populate;\n        //console.log('schm')\n    }\n    if (checkParam(req.query.filter, 'filter')) {\n        query[\"$and\"] = [];\n\n        var filter = JSON.parse(req.query.filter);\n        for (var i = 0; i < filter.length; i++) {\n            var p = { attributes: {} };\n            p[\"attributes\"][\"$elemMatch\"] = {};\n            p[\"attributes\"][\"$elemMatch\"]['id'] = filter[i].key;\n            p[\"attributes\"][\"$elemMatch\"][filter[i].datatype] = filter[i].value;\n            query[\"$and\"].push(p);\n        }\n        //console.log(filter);\n    }\n    var qAllArr = [\n        Record.find(query).count().exec(),\n        Record.find(query).sort({ created: -1 }).skip(items * (page - 1)).limit(items),\n    ]\n    if (query.schm) {\n        qAllArr.push(Schm.fullSchm(query.schm))\n    }\n    q.all(qAllArr).spread((count, data, schema) => {\n            return {\n                page: parseInt(page),\n                pages: Math.ceil(count / items),\n                length: data.length,\n                totalLength: count,\n                schema: schema,\n                items: data\n            }\n        })\n        .then(x => {\n            if (checkParam(req.query.populate, 'objectId')) {\n                return PopulateByAttr(x, req.query.populate);\n            }\n            return x;\n        })\n        .then(x => {\n            if (x.schemaPopulated) {\n                return Schm.fullSchm(x.schemaPopulated).then(s => {\n                    x.schemaPopulated = s;\n                    return x;\n                })\n            } else {\n                return x;\n            }\n        })\n        .then(x => respondWithResult(res)(x))\n        .fail(handleError(res));\n\n    function PopulateByAttr(res, attrId) {\n        res.itemsPopulated = res.items.map(x => {\n            return x.attributes.filter(x => x.id === attrId).map(x => x.reference)\n        }).map(x => {\n            if (x.length) {\n                return x[0]\n            } else {\n                return null;\n            }\n        }).filter(x => x);\n        var popQuery = { \"$or\": [] };\n        for (var q = 0; q < res.itemsPopulated.length; q++) {\n            popQuery.$or.push({ _id: res.itemsPopulated[q] })\n        }\n\n        return Record.find(popQuery).exec().then(x => {\n                if (x.length) {\n                    res.schemaPopulated = x[0].schm;\n                }\n                res.itemsPopulated = x;\n                return res;\n            })\n            //filtrar la referencia del \n    }\n}\nexport function aggregate(req, res) {\n    var query;\n    var AggregateParser = require(\"./services/aggregation.oidParser\").AggParser;\n\n    var aP = new AggregateParser(req.query.query);\n    query = aP.parse();\n\n\n    return Record.aggregate(query).exec()\n        .then(respondWithResult(res, 200))\n        .catch(handleError(res));\n\n}\n// Gets a single Record from the DB\nexport function show(req, res) {\n    //si schm, key y datatype estan presentes, el id será tomado como el valor del atributo y no como _id\n    var query;\n    if (\n        checkParam(req.query.schm, 'objectId') &&\n        checkParam(req.query.key, 'objectId') &&\n        checkParam(req.query.datatype, 'string')\n    ) {\n        query = { schm: req.query.schm, attributes: {} }\n        query.attributes[\"$elemMatch\"] = {};\n        query.attributes[\"$elemMatch\"][\"id\"] = req.query.key;\n        query.attributes[\"$elemMatch\"][req.query.datatype] = req.params.id;\n    } else {\n        query = req.params.id;\n    }\n\n    return q.fcall(x => query)\n        .then(function(res) {\n            if (typeof res === 'string') {\n                return Record.findById(res);\n            } else {\n                return Record.find(query);\n            }\n        })\n        .then(function(res) {\n            if (Array.isArray(res)) {\n                return Schm.fullSchm(req.query.schm)\n                    .then(function(schm) {\n                        return {\n                            length: res.length,\n                            schema: schm,\n                            record: res[0]\n                        }\n                    })\n            } else {\n                return Schm.fullSchm(res.schm)\n                    .then(function(schm) {\n                        return {\n                            schema: schm,\n                            record: res\n                        }\n                    })\n            }\n        })\n        .then(respondWithResult(res))\n        .catch(handleError(res))\n        .done(function(a) { console.log(\"DONE \" + a) });\n}\n\n// Creates a new Record in the DB\nexport function create(req, res) {\n    return Record.create(req.body)\n        .then(respondWithResult(res, 201))\n        .catch(handleError(res));\n}\n\n// Updates an existing Record in the DB\nexport function update(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    return Record.findById(req.params.id).exec()\n        .then(handleEntityNotFound(res))\n        .then(saveUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a Record from the DB\nexport function destroy(req, res) {\n    return Record.findById(req.params.id).exec()\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}"]}