{"version":3,"sources":["api/record/services/aggregation.queries.js"],"names":["espalderas","EvalIndiv","checkParam","param","dataType","response","length","test","arr","JSON","parse","isValid","index","key","value","datatype","err","console","log","req","espaldera","query","hilera","match","Types","ObjectId","project","attributes","$filter","input","as","cond","parseInt","$elemMatch","id","number","$eq","push","$project","$unwind","$group","_id","$sort","schm","attrLookup"],"mappings":"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","file":"aggregation.queries.js","sourcesContent":["import mongoose from 'mongoose';\n\n\nfunction checkParam(param, dataType) {\n\n  if(param === null){ return false; }\n  var response = false;\n  \n  if(dataType === 'string'){\n    if(typeof param === 'string' && param.length>0){\n      response = true;\n    }\n  }\n\n  if(dataType === 'number'){\n    //console.log('chequea numero')\n    if(typeof param === 'number'){\n      response = true;\n    }\n    if(typeof param === 'string'){\n      \n      if(/^\\d*$/.test( param )){\n        //console.log('es  numero')\n        response = true;\n      }\n    }\n  }\n\n  if(dataType === 'objectId'){\n    if(/^[0-9a-f]{24}$/i.test(param)){\n      response = true;\n    }\n  }\n\n  //filtro de registros\n  if (dataType === 'filter') {\n    //checkeando si hay errores en el parseo a JSON\n    try {\n      var arr = JSON.parse(param);\n      //check if is an Array and if is empty\n      if(arr.length){\n        // verificando si los obj dentro del array tiene las propiedades key, datatype y value\n        var isValid = true;\n        for (var index = 0; index < arr.length; index++) {\n          if(arr[index].key === null || arr[index].value === null || arr[index].datatype === null){\n            isValid = false;\n          }\n        }\n        response = isValid;\n      }\n\n    } catch (err) {\n      response = false;\n      console.log('invalid JSON')\n    }\n  }\n\n  return response;\n}\n\n\nexport function espalderas (req){\n    var espaldera = req.query.espaldera;\n    var hilera = req.query.hilera;\n\n    var match= {\n        \"schm\":mongoose.Types.ObjectId(\"57a4e02ec830e2bdff1a1608\"),\n        };\n    var project = {\n        attributes:{\n            $filter:{\n                input:'$attributes',\n                as:'attr',\n                cond:{\"$eq\":[\"$$attr.id\", \"espaldera\"]}\n            }\n        }\n    };\n\n    if(checkParam(req.query.espaldera, \"number\")){\n        espaldera = parseInt(espaldera);\n        match[\"$and\"] = [\n            {attributes:{$elemMatch:{id:\"espaldera\", number:espaldera}}}\n        ];\n        project.attributes.$filter.cond.$eq[1]=\"hilera\";\n    };\n\n    if(checkParam(req.query.espaldera, \"number\") && checkParam(hilera, \"number\")){\n        hilera = parseInt(hilera);\n        match[\"$and\"].push({attributes:{$elemMatch:{id:\"hilera\", number:hilera}}})\n        project.attributes.$filter.cond.$eq[1]=\"posicion\";\n    };\n    \n    \n    var query = [\n        { \"$match\":match},\n        { $project:project },\n        {$unwind:\"$attributes\"},\n        { $group:{ _id:\"$attributes.number\"} },\n        { $sort:{_id: 1} }\n    ]\n\n    return query;\n}\n\nexport function EvalIndiv (req){\n    var espaldera = req.query.espaldera;\n    var hilera = req.query.hilera;\n    var schm = req.query.schm;\n    var attrLookup = \"\";\n\n    var match= {\n        \"schm\":mongoose.Types.ObjectId(\"57a4e02ec830e2bdff1a1608\"),\n        };\n    var project = {\n        attributes:{\n            $filter:{\n                input:'$attributes',\n                as:'attr',\n                cond:{\"$eq\":[\"$$attr.id\", \"espaldera\"]}\n            }\n        }\n    };\n\n    if(checkParam(req.query.espaldera, \"number\")){\n        espaldera = parseInt(espaldera);\n        match[\"$and\"] = [\n            {attributes:{$elemMatch:{id:\"espaldera\", number:espaldera}}}\n        ];\n        project.attributes.$filter.cond.$eq[1]=\"hilera\";\n    };\n\n    if(checkParam(req.query.espaldera, \"number\") && checkParam(hilera, \"number\")){\n        hilera = parseInt(hilera);\n        match[\"$and\"].push({attributes:{$elemMatch:{id:\"hilera\", number:hilera}}})\n        project.attributes.$filter.cond.$eq[1]=\"posicion\";\n    };\n    \n    \n    var query = [\n        { \"$match\":match},\n        { $project:project },\n        {$unwind:\"$attributes\"},\n        { $group:{ _id:\"$attributes.number\"} },\n        { $sort:{_id: 1} }\n    ]\n\n    return query;\n}"]}