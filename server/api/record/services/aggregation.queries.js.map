{"version":3,"sources":["api/record/services/aggregation.queries.js"],"names":[],"mappings":"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","file":"api/record/services/aggregation.queries.js","sourcesContent":["import mongoose from 'mongoose';\n\n\nfunction checkParam(param, dataType) {\n\n  if(param === null){ return false; }\n  var response = false;\n  \n  if(dataType === 'string'){\n    if(typeof param === 'string' && param.length>0){\n      response = true;\n    }\n  }\n\n  if(dataType === 'number'){\n    //console.log('chequea numero')\n    if(typeof param === 'number'){\n      response = true;\n    }\n    if(typeof param === 'string'){\n      \n      if(/^\\d*$/.test( param )){\n        //console.log('es  numero')\n        response = true;\n      }\n    }\n  }\n\n  if(dataType === 'objectId'){\n    if(/^[0-9a-f]{24}$/i.test(param)){\n      response = true;\n    }\n  }\n\n  //filtro de registros\n  if (dataType === 'filter') {\n    //checkeando si hay errores en el parseo a JSON\n    try {\n      var arr = JSON.parse(param);\n      //check if is an Array and if is empty\n      if(arr.length){\n        // verificando si los obj dentro del array tiene las propiedades key, datatype y value\n        var isValid = true;\n        for (var index = 0; index < arr.length; index++) {\n          if(arr[index].key === null || arr[index].value === null || arr[index].datatype === null){\n            isValid = false;\n          }\n        }\n        response = isValid;\n      }\n\n    } catch (err) {\n      response = false;\n      console.log('invalid JSON')\n    }\n  }\n\n  return response;\n}\n\n\nexport function espalderas (req){\n    var espaldera = req.query.espaldera;\n    var hilera = req.query.hilera;\n\n    var match= {\n        \"schm\":mongoose.Types.ObjectId(\"57a4e02ec830e2bdff1a1608\"),\n        };\n    var project = {\n        attributes:{\n            $filter:{\n                input:'$attributes',\n                as:'attr',\n                cond:{\"$eq\":[\"$$attr.id\", \"espaldera\"]}\n            }\n        }\n    };\n\n    if(checkParam(req.query.espaldera, \"number\")){\n        espaldera = parseInt(espaldera);\n        match[\"$and\"] = [\n            {attributes:{$elemMatch:{id:\"espaldera\", number:espaldera}}}\n        ];\n        project.attributes.$filter.cond.$eq[1]=\"hilera\";\n    };\n\n    if(checkParam(req.query.espaldera, \"number\") && checkParam(hilera, \"number\")){\n        hilera = parseInt(hilera);\n        match[\"$and\"].push({attributes:{$elemMatch:{id:\"hilera\", number:hilera}}})\n        project.attributes.$filter.cond.$eq[1]=\"posicion\";\n    };\n    \n    \n    var query = [\n        { \"$match\":match},\n        { $project:project },\n        {$unwind:\"$attributes\"},\n        { $group:{ _id:\"$attributes.number\"} },\n        { $sort:{_id: 1} }\n    ]\n\n    return query;\n}\n\nexport function EvalIndiv (req){\n    var espaldera = req.query.espaldera;\n    var hilera = req.query.hilera;\n    var schm = req.query.schm;\n    var attrLookup = \"\";\n\n    var match= {\n        \"schm\":mongoose.Types.ObjectId(\"57a4e02ec830e2bdff1a1608\"),\n        };\n    var project = {\n        attributes:{\n            $filter:{\n                input:'$attributes',\n                as:'attr',\n                cond:{\"$eq\":[\"$$attr.id\", \"espaldera\"]}\n            }\n        }\n    };\n\n    if(checkParam(req.query.espaldera, \"number\")){\n        espaldera = parseInt(espaldera);\n        match[\"$and\"] = [\n            {attributes:{$elemMatch:{id:\"espaldera\", number:espaldera}}}\n        ];\n        project.attributes.$filter.cond.$eq[1]=\"hilera\";\n    };\n\n    if(checkParam(req.query.espaldera, \"number\") && checkParam(hilera, \"number\")){\n        hilera = parseInt(hilera);\n        match[\"$and\"].push({attributes:{$elemMatch:{id:\"hilera\", number:hilera}}})\n        project.attributes.$filter.cond.$eq[1]=\"posicion\";\n    };\n    \n    \n    var query = [\n        { \"$match\":match},\n        { $project:project },\n        {$unwind:\"$attributes\"},\n        { $group:{ _id:\"$attributes.number\"} },\n        { $sort:{_id: 1} }\n    ]\n\n    return query;\n}"],"sourceRoot":"/source/"}