{"version":3,"sources":["api/record/services/aggregation.oidParser.js"],"names":["AggParser","query","JSON","parse","e","console","log","Error","prototype","i","length","key","ssqParser","applyChange","oid","hasOwnProperty","Types","ObjectId","$oid","q","Array","isArray","w"],"mappings":";;;;;;;;;;;;;;QAEgBA,S,GAAAA,S;;AAFhB;;;;;;AAEO,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AAC7B,QAAI;AACA,aAAKA,KAAL,GAAaC,KAAKC,KAAL,CAAWF,KAAX,CAAb;AACH,KAFD,CAEE,OAAOG,CAAP,EAAU;AACRC,gBAAQC,GAAR,CAAY,oBAAZ;AACA,cAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;AAEJ;;AAEDP,UAAUQ,SAAV,CAAoBL,KAApB,GAA4B,YAAW;AACnC,SAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAI,KAAKR,KAAL,CAAWS,MAA/B,EAAuCD,GAAvC,EAA4C;AACxC,aAAK,IAAIE,GAAT,IAAgB,KAAKV,KAAL,CAAWQ,CAAX,CAAhB,EAA+B;AAC3B,iBAAKR,KAAL,CAAWQ,CAAX,EAAcE,GAAd,IAAqB,KAAKC,SAAL,CAAe,KAAKX,KAAL,CAAWQ,CAAX,EAAcE,GAAd,CAAf,CAArB;AACH;AACJ;AACDN,YAAQC,GAAR,CAAY,yBAAe,KAAKL,KAApB,CAAZ;AACA,WAAO,KAAKA,KAAZ;AACH,CARD;;AAUAD,UAAUQ,SAAV,CAAoBK,WAApB,GAAkC,UAASC,GAAT,EAAc;AAC5C,QAAI,CAACA,IAAIC,cAAJ,CAAmB,MAAnB,CAAL,EAAiC;AAAE,eAAOD,GAAP;AAAa;AAChD,WAAO,mBAASE,KAAT,CAAeC,QAAf,CAAwBH,IAAII,IAA5B,CAAP;AACH,CAHD;;AAKAlB,UAAUQ,SAAV,CAAoBI,SAApB,GAAgC,UAASO,CAAT,EAAY;AACxC,SAAK,IAAIV,CAAT,IAAcU,CAAd,EAAiB;AACb,YAAI,sBAAOA,EAAEV,CAAF,CAAP,MAAgB,QAAhB,IAA4B,CAACW,MAAMC,OAAN,CAAcF,EAAEV,CAAF,CAAd,CAAjC,EAAsD;AAClD,gBAAIU,EAAEV,CAAF,MAAS,IAAT,IAAiBU,EAAEV,CAAF,EAAKM,cAAL,CAAoB,MAApB,CAArB,EAAkD;AAC9CI,kBAAEV,CAAF,IAAO,KAAKI,WAAL,CAAiBM,EAAEV,CAAF,CAAjB,CAAP;AACH;AACD,iBAAK,IAAIa,CAAT,IAAcH,EAAEV,CAAF,CAAd,EAAoB;AAChBU,kBAAEV,CAAF,EAAKa,CAAL,IAAU,KAAKV,SAAL,CAAeO,EAAEV,CAAF,EAAKa,CAAL,CAAf,CAAV;AACH;AACJ;AACD,YAAIF,MAAMC,OAAN,CAAcF,EAAEV,CAAF,CAAd,CAAJ,EAAyB;AACrB,iBAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAIe,EAAEV,CAAF,EAAKC,MAAzB,EAAiCN,GAAjC,EAAsC;AAClCe,kBAAEV,CAAF,EAAKL,CAAL,IAAU,KAAKQ,SAAL,CAAeO,EAAEV,CAAF,EAAKL,CAAL,CAAf,CAAV;AACH;AACJ;AACJ;AACD,WAAOe,CAAP;AACH,CAjBD","file":"aggregation.oidParser.js","sourcesContent":["import mongoose from 'mongoose';\n\nexport function AggParser(query) {\n    try {\n        this.query = JSON.parse(query);\n    } catch (e) {\n        console.log(\"Error en el parseo\");\n        throw new Error(\"Error en el primer paso de Parseo de la query\");\n    }\n\n}\n\nAggParser.prototype.parse = function() {\n    for (var i = 0; i < this.query.length; i++) {\n        for (var key in this.query[i]) {\n            this.query[i][key] = this.ssqParser(this.query[i][key]);\n        }\n    };\n    console.log(JSON.stringify(this.query));\n    return this.query;\n};\n\nAggParser.prototype.applyChange = function(oid) {\n    if (!oid.hasOwnProperty(\"$oid\")) { return oid; }\n    return mongoose.Types.ObjectId(oid.$oid);\n};\n\nAggParser.prototype.ssqParser = function(q) {\n    for (var i in q) {\n        if (typeof q[i] === \"object\" && !Array.isArray(q[i])) {\n            if (q[i] !== null && q[i].hasOwnProperty(\"$oid\")) {\n                q[i] = this.applyChange(q[i]);\n            }\n            for (var w in q[i]) {\n                q[i][w] = this.ssqParser(q[i][w]);\n            }\n        }\n        if (Array.isArray(q[i])) {\n            for (var e = 0; e < q[i].length; e++) {\n                q[i][e] = this.ssqParser(q[i][e]);\n            }\n        }\n    }\n    return q;\n};"]}